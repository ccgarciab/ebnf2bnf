literal: '-' IntegerLiteral;
literal: IntegerLiteral;
literal: '-' FloatingPointLiteral;
literal: FloatingPointLiteral;
literal: BooleanLiteral;
literal: CharacterLiteral;
literal: StringLiteral;
literal: SymbolLiteral;
literal: 'null';
$aux_rule0: '.' Id;
$aux_rule0: '.' Id $aux_rule0;
qualId: Id $aux_rule0;
qualId: Id;
$aux_rule1: ',' Id;
$aux_rule1: ',' Id $aux_rule1;
ids: Id $aux_rule1;
ids: Id;
stableId: Id;
stableId: stableId '.' Id;
stableId: Id '.' 'this';
stableId: Id '.' 'super' classQualifier '.' Id;
stableId: Id '.' 'super' '.' Id;
stableId: 'this';
stableId: 'super' classQualifier '.' Id;
stableId: 'super' '.' Id;
classQualifier: '[' Id ']';
type_: functionArgTypes '=>' type_;
type_: infixType existentialClause;
type_: infixType;
$aux_rule2: ',' paramType;
$aux_rule2: ',' paramType $aux_rule2;
functionArgTypes: infixType;
functionArgTypes: '(' paramType $aux_rule2 ')';
functionArgTypes: '(' paramType ')';
functionArgTypes: '(' ')';
$aux_rule3: existentialDcl;
$aux_rule3: existentialDcl $aux_rule3;
existentialClause: 'forSome' '{' $aux_rule3 '}';
existentialDcl: 'type' typeDcl;
existentialDcl: 'val' valDcl;
$aux_rule4: Id compoundType;
$aux_rule4: Id compoundType $aux_rule4;
infixType: compoundType $aux_rule4;
infixType: compoundType;
$aux_rule5: 'with' annotType;
$aux_rule5: 'with' annotType $aux_rule5;
compoundType: annotType $aux_rule5 refinement;
compoundType: annotType $aux_rule5;
compoundType: annotType refinement;
compoundType: annotType;
compoundType: refinement;
$aux_rule6: annotation;
$aux_rule6: annotation $aux_rule6;
annotType: simpleType $aux_rule6;
annotType: simpleType;
simpleType: simpleType typeArgs;
simpleType: simpleType '#' Id;
simpleType: stableId '.' 'type';
simpleType: stableId;
simpleType: '(' types ')';
typeArgs: '[' types ']';
$aux_rule7: ',' type_;
$aux_rule7: ',' type_ $aux_rule7;
types: type_ $aux_rule7;
types: type_;
$aux_rule8: refineStat;
$aux_rule8: refineStat $aux_rule8;
refinement: NL '{' $aux_rule8 '}';
refinement: '{' $aux_rule8 '}';
refineStat: dcl;
refineStat: 'type' typeDef;
typePat: type_;
$aux_rule9: annotation;
$aux_rule9: annotation $aux_rule9;
ascription: ':' infixType;
ascription: ':' $aux_rule9;
ascription: ':' '_' '*';
expr: bindings '=>' expr;
expr: 'implicit' Id '=>' expr;
expr: Id '=>' expr;
expr: '_' '=>' expr;
expr: expr_one;
$aux_rule10: NL;
$aux_rule10: NL $aux_rule10;
$aux_rule11: NL;
$aux_rule11: NL $aux_rule11;
expr_one: 'if' '(' expr ')' $aux_rule10 expr 'else' expr;
expr_one: 'if' '(' expr ')' $aux_rule10 expr;
expr_one: 'if' '(' expr ')' expr 'else' expr;
expr_one: 'if' '(' expr ')' expr;
expr_one: 'while' '(' expr ')' $aux_rule11 expr;
expr_one: 'while' '(' expr ')' expr;
expr_one: 'try' expr 'catch' expr 'finally' expr;
expr_one: 'try' expr 'catch' expr;
expr_one: 'try' expr 'finally' expr;
expr_one: 'try' expr;
expr_one: 'do' expr 'while' '(' expr ')';
expr_one: 'for' '(' enumerators ')' 'yield' expr;
expr_one: 'for' '(' enumerators ')' expr;
expr_one: 'for' '{' enumerators '}' 'yield' expr;
expr_one: 'for' '{' enumerators '}' expr;
expr_one: 'throw' expr;
expr_one: 'return' expr;
expr_one: 'return';
expr_one: simpleExpr '.' Id '=' expr;
expr_one: simpleexpr_one '_' '.' Id '=' expr;
expr_one: simpleexpr_one '.' Id '=' expr;
expr_one: Id '=' expr;
expr_one: simpleexpr_one argumentExprs '=' expr;
expr_one: postfixExpr ascription;
expr_one: postfixExpr;
expr_one: postfixExpr 'match' '{' caseClauses '}';
prefixDef: '-';
prefixDef: '+';
prefixDef: '~';
prefixDef: '!';
$aux_rule12: prefixDef simpleexpr_one;
$aux_rule12: prefixDef simpleexpr_one $aux_rule12;
postfixExpr: infixExpr Id $aux_rule12 NL;
postfixExpr: infixExpr Id $aux_rule12;
postfixExpr: infixExpr Id NL;
postfixExpr: infixExpr Id;
postfixExpr: infixExpr $aux_rule12 NL;
postfixExpr: infixExpr $aux_rule12;
postfixExpr: infixExpr NL;
postfixExpr: infixExpr;
infixExpr: prefixExpr;
infixExpr: infixExpr Id NL infixExpr;
infixExpr: infixExpr Id infixExpr;
prefixExpr: prefixDef simpleExpr;
prefixExpr: prefixDef simpleexpr_one '_';
prefixExpr: prefixDef simpleexpr_one;
prefixExpr: simpleExpr;
prefixExpr: simpleexpr_one '_';
prefixExpr: simpleexpr_one;
simpleExpr: 'new' classTemplate;
simpleExpr: 'new' templateBody;
simpleExpr: blockExpr;
simpleexpr_one: literal;
simpleexpr_one: stableId;
simpleexpr_one: '_';
simpleexpr_one: '(' exprs ')';
simpleexpr_one: '(' ')';
simpleexpr_one: simpleExpr '.' Id;
simpleexpr_one: simpleexpr_one '_' '.' Id;
simpleexpr_one: simpleexpr_one '.' Id;
simpleexpr_one: simpleExpr typeArgs;
simpleexpr_one: simpleexpr_one '_' typeArgs;
simpleexpr_one: simpleexpr_one typeArgs;
simpleexpr_one: simpleexpr_one argumentExprs;
$aux_rule13: ',' expr;
$aux_rule13: ',' expr $aux_rule13;
exprs: expr $aux_rule13;
exprs: expr;
argumentExprs: '(' args ')';
argumentExprs: '{' args '}';
argumentExprs: NL blockExpr;
argumentExprs: blockExpr;
args: exprs;
args: epsilon;
args: exprs ',' postfixExpr ':';
args: exprs ',' postfixExpr '_';
args: exprs ',' postfixExpr '*';
args: exprs ',' postfixExpr;
args: postfixExpr ':';
args: postfixExpr '_';
args: postfixExpr '*';
args: postfixExpr;
blockExpr: '{' caseClauses '}';
blockExpr: '{' block '}';
$aux_rule14: blockStat;
$aux_rule14: blockStat $aux_rule14;
block: $aux_rule14 resultExpr;
block: $aux_rule14;
$aux_rule15: annotation;
$aux_rule15: annotation $aux_rule15;
$aux_rule16: annotation;
$aux_rule16: annotation $aux_rule16;
$aux_rule17: localModifier;
$aux_rule17: localModifier $aux_rule17;
blockStat: import_;
blockStat: $aux_rule15 'implicit' def_;
blockStat: $aux_rule15 'lazy' def_;
blockStat: $aux_rule15 def_;
blockStat: 'implicit' def_;
blockStat: 'lazy' def_;
blockStat: def_;
blockStat: $aux_rule16 $aux_rule17 tmplDef;
blockStat: $aux_rule16 tmplDef;
blockStat: $aux_rule17 tmplDef;
blockStat: tmplDef;
blockStat: expr_one;
resultExpr: expr_one;
resultExpr: bindings '=>' block;
resultExpr: 'implicit' Id ':' compoundType '=>' block;
resultExpr: Id ':' compoundType '=>' block;
resultExpr: '_' ':' compoundType '=>' block;
$aux_rule18: generator;
$aux_rule18: generator $aux_rule18;
enumerators: $aux_rule18;
$aux_rule19: guard_;
$aux_rule19: pattern_one '=' expr;
$aux_rule19: guard_ $aux_rule19;
$aux_rule19: pattern_one '=' expr $aux_rule19;
generator: pattern_one '<-' expr $aux_rule19;
generator: pattern_one '<-' expr;
$aux_rule20: caseClause;
$aux_rule20: caseClause $aux_rule20;
caseClauses: $aux_rule20;
caseClause: 'case' pattern guard_ '=>' block;
caseClause: 'case' pattern '=>' block;
guard_: 'if' postfixExpr;
$aux_rule21: '|' pattern_one;
$aux_rule21: '|' pattern_one $aux_rule21;
pattern: pattern_one $aux_rule21;
pattern: pattern_one;
pattern_one: BoundVarid ':' typePat;
pattern_one: '_' ':' typePat;
pattern_one: Id ':' typePat;
pattern_one: pattern_two;
pattern_two: Id '@' pattern_three;
pattern_two: Id;
pattern_two: pattern_three;
$aux_rule22: Id NL simplePattern;
$aux_rule22: Id simplePattern;
$aux_rule22: Id NL simplePattern $aux_rule22;
$aux_rule22: Id simplePattern $aux_rule22;
pattern_three: simplePattern;
pattern_three: simplePattern $aux_rule22;
pattern_three: simplePattern;
simplePattern: '_';
simplePattern: Varid;
simplePattern: literal;
simplePattern: stableId '(' patterns ')';
simplePattern: stableId '(' ')';
simplePattern: stableId;
simplePattern: stableId '(' patterns ',' Id '@' '_' '*' ')';
simplePattern: stableId '(' patterns ',' '_' '*' ')';
simplePattern: stableId '(' Id '@' '_' '*' ')';
simplePattern: stableId '(' '_' '*' ')';
simplePattern: '(' patterns ')';
simplePattern: '(' ')';
patterns: pattern ',' patterns;
patterns: pattern;
patterns: '_' '*';
$aux_rule23: ',' variantTypeParam;
$aux_rule23: ',' variantTypeParam $aux_rule23;
typeParamClause: '[' variantTypeParam $aux_rule23 ']';
typeParamClause: '[' variantTypeParam ']';
$aux_rule24: ',' typeParam;
$aux_rule24: ',' typeParam $aux_rule24;
funTypeParamClause: '[' typeParam $aux_rule24 ']';
funTypeParamClause: '[' typeParam ']';
$aux_rule25: annotation;
$aux_rule25: annotation $aux_rule25;
variantTypeParam: $aux_rule25 '+' typeParam;
variantTypeParam: $aux_rule25 '-' typeParam;
variantTypeParam: $aux_rule25 typeParam;
variantTypeParam: '+' typeParam;
variantTypeParam: '-' typeParam;
variantTypeParam: typeParam;
$aux_rule26: '<%' type_;
$aux_rule26: '<%' type_ $aux_rule26;
$aux_rule27: ':' type_;
$aux_rule27: ':' type_ $aux_rule27;
typeParam: Id typeParamClause '>:' type '<:' type_ $aux_rule26 $aux_rule27;
typeParam: Id typeParamClause '>:' type '<:' type_ $aux_rule26;
typeParam: Id typeParamClause '>:' type '<:' type_ $aux_rule27;
typeParam: Id typeParamClause '>:' type '<:' type_;
typeParam: Id typeParamClause '>:' type $aux_rule26 $aux_rule27;
typeParam: Id typeParamClause '>:' type $aux_rule26;
typeParam: Id typeParamClause '>:' type $aux_rule27;
typeParam: Id typeParamClause '>:' type;
typeParam: Id typeParamClause '<:' type_ $aux_rule26 $aux_rule27;
typeParam: Id typeParamClause '<:' type_ $aux_rule26;
typeParam: Id typeParamClause '<:' type_ $aux_rule27;
typeParam: Id typeParamClause '<:' type_;
typeParam: Id typeParamClause $aux_rule26 $aux_rule27;
typeParam: Id typeParamClause $aux_rule26;
typeParam: Id typeParamClause $aux_rule27;
typeParam: Id typeParamClause;
typeParam: Id '>:' type '<:' type_ $aux_rule26 $aux_rule27;
typeParam: Id '>:' type '<:' type_ $aux_rule26;
typeParam: Id '>:' type '<:' type_ $aux_rule27;
typeParam: Id '>:' type '<:' type_;
typeParam: Id '>:' type $aux_rule26 $aux_rule27;
typeParam: Id '>:' type $aux_rule26;
typeParam: Id '>:' type $aux_rule27;
typeParam: Id '>:' type;
typeParam: Id '<:' type_ $aux_rule26 $aux_rule27;
typeParam: Id '<:' type_ $aux_rule26;
typeParam: Id '<:' type_ $aux_rule27;
typeParam: Id '<:' type_;
typeParam: Id $aux_rule26 $aux_rule27;
typeParam: Id $aux_rule26;
typeParam: Id $aux_rule27;
typeParam: Id;
typeParam: '' typeParamClause '>:' type '<:' type_ $aux_rule26 $aux_rule27;
typeParam: '' typeParamClause '>:' type '<:' type_ $aux_rule26;
typeParam: '' typeParamClause '>:' type '<:' type_ $aux_rule27;
typeParam: '' typeParamClause '>:' type '<:' type_;
typeParam: '' typeParamClause '>:' type $aux_rule26 $aux_rule27;
typeParam: '' typeParamClause '>:' type $aux_rule26;
typeParam: '' typeParamClause '>:' type $aux_rule27;
typeParam: '' typeParamClause '>:' type;
typeParam: '' typeParamClause '<:' type_ $aux_rule26 $aux_rule27;
typeParam: '' typeParamClause '<:' type_ $aux_rule26;
typeParam: '' typeParamClause '<:' type_ $aux_rule27;
typeParam: '' typeParamClause '<:' type_;
typeParam: '' typeParamClause $aux_rule26 $aux_rule27;
typeParam: '' typeParamClause $aux_rule26;
typeParam: '' typeParamClause $aux_rule27;
typeParam: '' typeParamClause;
typeParam: '' '>:' type '<:' type_ $aux_rule26 $aux_rule27;
typeParam: '' '>:' type '<:' type_ $aux_rule26;
typeParam: '' '>:' type '<:' type_ $aux_rule27;
typeParam: '' '>:' type '<:' type_;
typeParam: '' '>:' type $aux_rule26 $aux_rule27;
typeParam: '' '>:' type $aux_rule26;
typeParam: '' '>:' type $aux_rule27;
typeParam: '' '>:' type;
typeParam: '' '<:' type_ $aux_rule26 $aux_rule27;
typeParam: '' '<:' type_ $aux_rule26;
typeParam: '' '<:' type_ $aux_rule27;
typeParam: '' '<:' type_;
typeParam: '' $aux_rule26 $aux_rule27;
typeParam: '' $aux_rule26;
typeParam: '' $aux_rule27;
typeParam: '';
$aux_rule28: paramClause;
$aux_rule28: paramClause $aux_rule28;
paramClauses: $aux_rule28 NL '(' 'implicit' params ')';
paramClauses: $aux_rule28 '(' 'implicit' params ')';
paramClauses: $aux_rule28;
paramClauses: NL '(' 'implicit' params ')';
paramClauses: '(' 'implicit' params ')';
paramClauses: epsilon;
paramClause: NL '(' params ')';
paramClause: NL '(' ')';
paramClause: '(' params ')';
paramClause: '(' ')';
$aux_rule29: ',' param;
$aux_rule29: ',' param $aux_rule29;
params: param $aux_rule29;
params: param;
$aux_rule30: annotation;
$aux_rule30: annotation $aux_rule30;
param: $aux_rule30 Id ':' paramType '=' expr;
param: $aux_rule30 Id ':' paramType;
param: $aux_rule30 Id '=' expr;
param: $aux_rule30 Id;
param: Id ':' paramType '=' expr;
param: Id ':' paramType;
param: Id '=' expr;
param: Id;
paramType: type_;
paramType: '=>' type_;
paramType: type_ '*';
$aux_rule31: classParamClause;
$aux_rule31: classParamClause $aux_rule31;
classParamClauses: $aux_rule31 NL '(' 'implicit' classParams ')';
classParamClauses: $aux_rule31 '(' 'implicit' classParams ')';
classParamClauses: $aux_rule31;
classParamClauses: NL '(' 'implicit' classParams ')';
classParamClauses: '(' 'implicit' classParams ')';
classParamClauses: epsilon;
classParamClause: NL '(' classParams ')';
classParamClause: NL '(' ')';
classParamClause: '(' classParams ')';
classParamClause: '(' ')';
$aux_rule32: ',' classParam;
$aux_rule32: ',' classParam $aux_rule32;
classParams: classParam $aux_rule32;
classParams: classParam;
$aux_rule33: annotation;
$aux_rule33: annotation $aux_rule33;
$aux_rule34: modifier;
$aux_rule34: modifier $aux_rule34;
classParam: $aux_rule33 $aux_rule34 'val' Id ':' paramType '=' expr;
classParam: $aux_rule33 $aux_rule34 'val' Id ':' paramType;
classParam: $aux_rule33 $aux_rule34 'var' Id ':' paramType '=' expr;
classParam: $aux_rule33 $aux_rule34 'var' Id ':' paramType;
classParam: $aux_rule33 $aux_rule34 Id ':' paramType '=' expr;
classParam: $aux_rule33 $aux_rule34 Id ':' paramType;
classParam: $aux_rule33 'val' Id ':' paramType '=' expr;
classParam: $aux_rule33 'val' Id ':' paramType;
classParam: $aux_rule33 'var' Id ':' paramType '=' expr;
classParam: $aux_rule33 'var' Id ':' paramType;
classParam: $aux_rule33 Id ':' paramType '=' expr;
classParam: $aux_rule33 Id ':' paramType;
classParam: $aux_rule34 'val' Id ':' paramType '=' expr;
classParam: $aux_rule34 'val' Id ':' paramType;
classParam: $aux_rule34 'var' Id ':' paramType '=' expr;
classParam: $aux_rule34 'var' Id ':' paramType;
classParam: $aux_rule34 Id ':' paramType '=' expr;
classParam: $aux_rule34 Id ':' paramType;
classParam: 'val' Id ':' paramType '=' expr;
classParam: 'val' Id ':' paramType;
classParam: 'var' Id ':' paramType '=' expr;
classParam: 'var' Id ':' paramType;
classParam: Id ':' paramType '=' expr;
classParam: Id ':' paramType;
$aux_rule35: ',' binding;
$aux_rule35: ',' binding $aux_rule35;
bindings: '(' binding $aux_rule35 ')';
bindings: '(' binding ')';
binding: Id ':' type;
binding: Id;
binding: '' ':' type;
binding: '';
modifier: localModifier;
modifier: accessModifier;
modifier: 'override';
localModifier: 'abstract';
localModifier: 'final';
localModifier: 'sealed';
localModifier: 'implicit';
localModifier: 'lazy';
accessModifier: 'private' accessQualifier;
accessModifier: 'private';
accessModifier: 'protected' accessQualifier;
accessModifier: 'protected';
accessQualifier: '[' Id ']';
accessQualifier: '[' 'this' ']';
$aux_rule36: argumentExprs;
$aux_rule36: argumentExprs $aux_rule36;
annotation: '@' simpleType $aux_rule36;
annotation: '@' simpleType;
constrAnnotation: '@' simpleType argumentExprs;
$aux_rule37: templateStat;
$aux_rule37: templateStat $aux_rule37;
templateBody: NL '{' selfType $aux_rule37 '}';
templateBody: NL '{' $aux_rule37 '}';
templateBody: '{' selfType $aux_rule37 '}';
templateBody: '{' $aux_rule37 '}';
$aux_rule38: annotation NL;
$aux_rule38: annotation;
$aux_rule38: annotation NL $aux_rule38;
$aux_rule38: annotation $aux_rule38;
$aux_rule39: modifier;
$aux_rule39: modifier $aux_rule39;
$aux_rule40: annotation NL;
$aux_rule40: annotation;
$aux_rule40: annotation NL $aux_rule40;
$aux_rule40: annotation $aux_rule40;
$aux_rule41: modifier;
$aux_rule41: modifier $aux_rule41;
templateStat: import_;
templateStat: $aux_rule38 $aux_rule39 def_;
templateStat: $aux_rule38 def_;
templateStat: $aux_rule39 def_;
templateStat: def_;
templateStat: $aux_rule40 $aux_rule41 dcl;
templateStat: $aux_rule40 dcl;
templateStat: $aux_rule41 dcl;
templateStat: dcl;
templateStat: expr;
selfType: Id ':' type_ '=>';
selfType: Id '=>';
selfType: 'this' ':' type_ '=>';
$aux_rule42: ',' importExpr;
$aux_rule42: ',' importExpr $aux_rule42;
import_: 'import' importExpr $aux_rule42;
import_: 'import' importExpr;
importExpr: stableId '.' Id;
importExpr: stableId '.' '_';
importExpr: stableId '.' importSelectors;
importExpr: stableId;
$aux_rule43: importSelector ',';
$aux_rule43: importSelector ',' $aux_rule43;
importSelectors: '{' $aux_rule43 importSelector '}';
importSelectors: '{' $aux_rule43 '_' '}';
importSelectors: '{' importSelector '}';
importSelectors: '{' '_' '}';
importSelector: Id '=>' Id;
importSelector: Id '=>' '_';
importSelector: Id;
$aux_rule44: NL;
$aux_rule44: NL $aux_rule44;
dcl: 'val' valDcl;
dcl: 'var' varDcl;
dcl: 'def' funDcl;
dcl: 'type' $aux_rule44 typeDcl;
dcl: 'type' typeDcl;
valDcl: ids ':' type_;
varDcl: ids ':' type_;
funDcl: funSig ':' type_;
funDcl: funSig;
funSig: Id funTypeParamClause paramClauses;
funSig: Id paramClauses;
typeDcl: Id typeParamClause '>:' type_ '<:' type_;
typeDcl: Id typeParamClause '>:' type_;
typeDcl: Id typeParamClause '<:' type_;
typeDcl: Id typeParamClause;
typeDcl: Id '>:' type_ '<:' type_;
typeDcl: Id '>:' type_;
typeDcl: Id '<:' type_;
typeDcl: Id;
patVarDef: 'val' patDef;
patVarDef: 'var' varDef;
$aux_rule45: NL;
$aux_rule45: NL $aux_rule45;
def_: patVarDef;
def_: 'def' funDef;
def_: 'type' $aux_rule45 typeDef;
def_: 'type' typeDef;
def_: tmplDef;
$aux_rule46: ',' pattern_two;
$aux_rule46: ',' pattern_two $aux_rule46;
patDef: pattern_two $aux_rule46 ':' type_ '=' expr;
patDef: pattern_two $aux_rule46 '=' expr;
patDef: pattern_two ':' type_ '=' expr;
patDef: pattern_two '=' expr;
varDef: patDef;
varDef: ids ':' type_ '=' '_';
funDef: funSig ':' type_ '=' expr;
funDef: funSig '=' expr;
funDef: funSig NL '{' block '}';
funDef: funSig '{' block '}';
funDef: 'this' paramClause paramClauses '=' constrExpr;
funDef: 'this' paramClause paramClauses NL constrBlock;
funDef: 'this' paramClause paramClauses constrBlock;
typeDef: Id typeParamClause '=' type_;
typeDef: Id '=' type_;
tmplDef: 'case' 'class' classDef;
tmplDef: 'class' classDef;
tmplDef: 'case' 'object' objectDef;
tmplDef: 'object' objectDef;
tmplDef: 'trait' traitDef;
$aux_rule47: constrAnnotation;
$aux_rule47: constrAnnotation $aux_rule47;
classDef: Id typeParamClause $aux_rule47 accessModifier classParamClauses classTemplateOpt;
classDef: Id typeParamClause $aux_rule47 classParamClauses classTemplateOpt;
classDef: Id typeParamClause accessModifier classParamClauses classTemplateOpt;
classDef: Id typeParamClause classParamClauses classTemplateOpt;
classDef: Id $aux_rule47 accessModifier classParamClauses classTemplateOpt;
classDef: Id $aux_rule47 classParamClauses classTemplateOpt;
classDef: Id accessModifier classParamClauses classTemplateOpt;
classDef: Id classParamClauses classTemplateOpt;
traitDef: Id typeParamClause traitTemplateOpt;
traitDef: Id traitTemplateOpt;
objectDef: Id classTemplateOpt;
classTemplateOpt: 'extends' classTemplate;
classTemplateOpt: 'extends' templateBody;
classTemplateOpt: templateBody;
classTemplateOpt: epsilon;
traitTemplateOpt: 'extends' traitTemplate;
traitTemplateOpt: 'extends' templateBody;
traitTemplateOpt: templateBody;
traitTemplateOpt: epsilon;
classTemplate: earlyDefs classParents templateBody;
classTemplate: earlyDefs classParents;
classTemplate: classParents templateBody;
classTemplate: classParents;
traitTemplate: earlyDefs traitParents templateBody;
traitTemplate: earlyDefs traitParents;
traitTemplate: traitParents templateBody;
traitTemplate: traitParents;
$aux_rule48: 'with' annotType;
$aux_rule48: 'with' annotType $aux_rule48;
classParents: constr $aux_rule48;
classParents: constr;
$aux_rule49: 'with' annotType;
$aux_rule49: 'with' annotType $aux_rule49;
traitParents: annotType $aux_rule49;
traitParents: annotType;
$aux_rule50: argumentExprs;
$aux_rule50: argumentExprs $aux_rule50;
constr: annotType $aux_rule50;
constr: annotType;
$aux_rule51: earlyDef;
$aux_rule51: earlyDef $aux_rule51;
earlyDefs: '{' $aux_rule51 '}' 'with';
$aux_rule52: annotation NL;
$aux_rule52: annotation;
$aux_rule52: annotation NL $aux_rule52;
$aux_rule52: annotation $aux_rule52;
$aux_rule53: modifier;
$aux_rule53: modifier $aux_rule53;
earlyDef: $aux_rule52 $aux_rule53 patVarDef;
earlyDef: $aux_rule52 patVarDef;
earlyDef: $aux_rule53 patVarDef;
earlyDef: patVarDef;
constrExpr: selfInvocation;
constrExpr: constrBlock;
$aux_rule54: blockStat;
$aux_rule54: blockStat $aux_rule54;
constrBlock: '{' selfInvocation $aux_rule54 '}';
constrBlock: '{' selfInvocation '}';
$aux_rule55: argumentExprs;
$aux_rule55: argumentExprs $aux_rule55;
selfInvocation: 'this' $aux_rule55;
$aux_rule56: topStat;
$aux_rule56: topStat $aux_rule56;
topStatSeq: $aux_rule56;
$aux_rule57: annotation NL;
$aux_rule57: annotation;
$aux_rule57: annotation NL $aux_rule57;
$aux_rule57: annotation $aux_rule57;
$aux_rule58: modifier;
$aux_rule58: modifier $aux_rule58;
topStat: $aux_rule57 $aux_rule58 tmplDef;
topStat: $aux_rule57 tmplDef;
topStat: $aux_rule58 tmplDef;
topStat: tmplDef;
topStat: import_;
topStat: packaging;
topStat: packageObject;
packaging: 'package' qualId NL '{' topStatSeq '}';
packaging: 'package' qualId '{' topStatSeq '}';
packageObject: 'package' 'object' objectDef;
$aux_rule59: 'package' qualId;
$aux_rule59: 'package' qualId $aux_rule59;
compilationUnit: $aux_rule59 topStatSeq;
compilationUnit: topStatSeq;
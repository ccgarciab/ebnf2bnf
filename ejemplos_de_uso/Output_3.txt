$aux_rule0: procedimiento;
$aux_rule0: procedimiento $aux_rule0;
inicial: programa $aux_rule0 EOF;
inicial: programa EOF;
programa: nombre_programa programa_principal;
programa: programa_principal;
nombre_programa: 'programa' IDENTIFICADOR;
programa_principal: declaraciones cuerpo_principal;
$aux_rule1: tipos;
$aux_rule1: vars;
$aux_rule1: consts;
$aux_rule1: tipos $aux_rule1;
$aux_rule1: vars $aux_rule1;
$aux_rule1: consts $aux_rule1;
declaraciones: $aux_rule1;
declaraciones: epsilon;
$aux_rule2: decl_tipo;
$aux_rule2: decl_tipo $aux_rule2;
tipos: tipos_kw $aux_rule2;
tipos: tipos_kw;
$aux_rule3: decl_vars;
$aux_rule3: decl_vars $aux_rule3;
vars: var_kw $aux_rule3;
vars: var_kw;
$aux_rule4: decl_const;
$aux_rule4: decl_const $aux_rule4;
consts: const_kw $aux_rule4;
consts: const_kw;
cuerpo_principal: 'inicio' sentencias 'fin';
var_kw: 'var';
var_kw: 'variables';
const_kw: 'const';
const_kw: 'constantes';
tipos_kw: 'tipos';
decl_tipo: IDENTIFICADOR ':' tipo ';';
decl_tipo: IDENTIFICADOR ':' tipo;
$aux_rule5: ',' IDENTIFICADOR;
$aux_rule5: ',' IDENTIFICADOR $aux_rule5;
decl_vars: IDENTIFICADOR $aux_rule5 ':' tipo ';';
decl_vars: IDENTIFICADOR $aux_rule5 ':' tipo;
decl_vars: IDENTIFICADOR ':' tipo ';';
decl_vars: IDENTIFICADOR ':' tipo;
decl_const: IDENTIFICADOR '=' literal ';';
decl_const: IDENTIFICADOR '=' literal;
decl_const: IDENTIFICADOR '=' IDENTIFICADOR ';';
decl_const: IDENTIFICADOR '=' IDENTIFICADOR;
tipo: tipo_escalar;
tipo: tipo_vector;
tipo: tipo_matriz;
tipo: IDENTIFICADOR;
tipo_escalar: 'numerico';
tipo_escalar: 'logico';
tipo_escalar: 'cadena';
tipo_vector: 'vector' '[' LITERAL_NUMERICO ']' tipo_escalar;
tipo_vector: 'vector' '[' IDENTIFICADOR ']' tipo_escalar;
tipo_vector: 'vector' '[' '*' ']' tipo_escalar;
tipo_matriz: 'matriz' '[' dimensiones_variables ']' tipo_escalar;
tipo_matriz: 'matriz' '[' dimensiones_fijas ']' tipo_escalar;
$aux_rule6: ',' dimension_variable;
$aux_rule6: ',' dimension_variable $aux_rule6;
$aux_rule7: ',' dimension;
$aux_rule7: ',' dimension $aux_rule7;
dimensiones_variables: dimension_variable $aux_rule6 $aux_rule7;
dimensiones_variables: dimension_variable $aux_rule6;
dimensiones_variables: dimension_variable $aux_rule7;
dimensiones_variables: dimension_variable;
$aux_rule8: ',' dimension;
$aux_rule8: ',' dimension $aux_rule8;
dimensiones_fijas: dimension $aux_rule8;
dimensiones_fijas: dimension;
dimension: LITERAL_NUMERICO;
dimension: IDENTIFICADOR;
dimension_variable: '*';
literal: LITERAL_NUMERICO;
literal: LITERAL_CADENA;
literal: LITERAL_LOGICO;
literal: literal_compuesto;
sentencia: si ';';
sentencia: si;
sentencia: mientras ';';
sentencia: mientras;
sentencia: repetir_hasta ';';
sentencia: repetir_hasta;
sentencia: asignacion ';';
sentencia: asignacion;
sentencia: desde ';';
sentencia: desde;
sentencia: eval ';';
sentencia: eval;
sentencia: expr ';';
sentencia: expr;
$aux_rule9: 'sino' 'si' condicion sentencias;
$aux_rule9: 'sino' 'si' condicion sentencias $aux_rule9;
si: 'si' condicion '{' sentencias $aux_rule9 'sino' sentencias '}';
si: 'si' condicion '{' sentencias 'sino' sentencias '}';
si: 'si' condicion '{' sentencias '}';
sino_si: 'sino' 'si' condicion sentencias;
$aux_rule10: sentencia;
$aux_rule10: sentencia $aux_rule10;
sentencias: $aux_rule10;
sentencias: epsilon;
condicion: '(' expr ')';
mientras: 'mientras' condicion '{' sentencias '}';
repetir_hasta: 'repetir' sentencias 'hasta' condicion;
$aux_rule11: 'caso' condicion sentencias;
$aux_rule11: 'caso' condicion sentencias $aux_rule11;
eval: 'eval' '{' $aux_rule11 'sino' sentencias '}';
eval: 'eval' '{' $aux_rule11 '}';
desde: 'desde' IDENTIFICADOR '=' expr 'hasta' expr 'paso' expr '{' sentencias '}';
desde: 'desde' IDENTIFICADOR '=' expr 'hasta' expr '{' sentencias '}';
asignacion: IDENTIFICADOR '=' expr;
expr: disyuncion;
$aux_rule12: 'or' conjuncion;
$aux_rule12: 'or' conjuncion $aux_rule12;
disyuncion: conjuncion $aux_rule12;
disyuncion: conjuncion;
$aux_rule13: 'and' negacion;
$aux_rule13: 'and' negacion $aux_rule13;
conjuncion: negacion $aux_rule13;
conjuncion: negacion;
negacion: 'not' negacion;
negacion: comparacion;
$aux_rule14: OP_COMPARACION termino;
$aux_rule14: OP_COMPARACION termino $aux_rule14;
comparacion: termino $aux_rule14;
comparacion: termino;
$aux_rule15: OP_SUMA factor;
$aux_rule15: OP_SUMA factor $aux_rule15;
termino: factor $aux_rule15;
termino: factor;
$aux_rule16: OP_MUL expr_signo;
$aux_rule16: OP_MUL expr_signo $aux_rule16;
factor: expr_signo $aux_rule16;
factor: expr_signo;
expr_signo: OP_SUMA expr_signo;
expr_signo: potencia;
$aux_rule17: '^' acceso;
$aux_rule17: '^' acceso $aux_rule17;
potencia: acceso $aux_rule17;
potencia: acceso;
$aux_rule18: '(' argumentos ')';
$aux_rule18: '(' ')';
$aux_rule18: '[' expr ']';
$aux_rule18: '(' argumentos ')' $aux_rule18;
$aux_rule18: '(' ')' $aux_rule18;
$aux_rule18: '[' expr ']' $aux_rule18;
acceso: primario $aux_rule18;
acceso: primario;
primario: literal;
primario: IDENTIFICADOR;
primario: '(' expr ')';
$aux_rule19: ',' expr;
$aux_rule19: ',' expr $aux_rule19;
argumentos: expr $aux_rule19;
argumentos: expr;
$aux_rule20: ',' expr;
$aux_rule20: ',' expr $aux_rule20;
literal_compuesto: '{' expr $aux_rule20 '}';
literal_compuesto: '{' expr '}';
procedimiento: subrutina;
procedimiento: funcion;
$aux_rule21: ',' IDENTIFICADOR;
$aux_rule21: ',' IDENTIFICADOR $aux_rule21;
parametros: 'ref' IDENTIFICADOR $aux_rule21 ':' tipo;
parametros: 'ref' IDENTIFICADOR ':' tipo;
parametros: IDENTIFICADOR $aux_rule21 ':' tipo;
parametros: IDENTIFICADOR ':' tipo;
$aux_rule22: ';' parametros;
$aux_rule22: ';' parametros $aux_rule22;
lista_parametros: parametros $aux_rule22;
lista_parametros: parametros;
encabezado: 'subrutina' IDENTIFICADOR '(' lista_parametros ')';
encabezado: 'subrutina' IDENTIFICADOR '(' ')';
retorno: RETORNA expr;
subrutina: encabezado declaraciones 'inicio' sentencias 'fin';
funcion: encabezado RETORNA tipo declaraciones 'inicio' sentencias retorno 'fin';